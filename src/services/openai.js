const axios = require('axios');
const path = require('path');
const { saveRejectedGrant } = require('../lib/db');
require('dotenv').config({ path: path.join(__dirname, '../../.env') });

const CONFIG = {
    MAX_TEXT_LENGTH: 20000,
    RETRY_COUNT: 3,
    RETRY_DELAY: 1000,
   // TEMPERATURE: 0.2,
    MODEL: 'gpt-4o-mini',
    // MODEL: 'gpt-4.1-mini',
    DEBUG_LOGGING: process.env.DEBUG_AI_EXTRACTION === 'true' // Set to true in .env for deadline debugging
};

const categories = [
    '–æ—Å–≤—ñ—Ç–∞', '—Å—Ç–∞—Ä—Ç–∞–ø–∏', '–ø—ñ–¥—Ç—Ä–∏–º–∫–∞ –≤–µ—Ç–µ—Ä–∞–Ω—ñ–≤', '–ø—ñ–¥–ø—Ä–∏—î–º–Ω–∏—Ü—Ç–≤–æ', 
    '–±—ñ–∑–Ω–µ—Å-—à–∫–æ–ª–∏', '–∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–µ –Ω–∞–≤—á–∞–Ω–Ω—è', '–ø—Ä–æ–≥—Ä–∞–º–∏ –¥–ª—è –∂—ñ–Ω–æ–∫', 
    '–ª—ñ–¥–µ—Ä—Å—Ç–≤–æ –π —Ä–µ–∑–∏–ª—å—î–Ω—Ç–Ω—ñ—Å—Ç—å', '—Ñ—ñ–Ω–∞–Ω—Å–∏ –π —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó', 'HR', 
    '—ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ–π–Ω—ñ –ø—Ä–æ—î–∫—Ç–∏'
];

// const keywords = {
//     '–æ—Å–≤—ñ—Ç–∞': ['higher education funding', 'education grants', 'capacity building', 'professional development', 'business education', 'executive education', '—Ñ—ñ–Ω–∞–Ω—Å—É–≤–∞–Ω–Ω—è –≤–∏—â–æ—ó –æ—Å–≤—ñ—Ç–∏', '–æ—Å–≤—ñ—Ç–Ω—ñ –≥—Ä–∞–Ω—Ç–∏', '–Ω–∞—Ä–æ—â—É–≤–∞–Ω–Ω—è –ø–æ—Ç–µ–Ω—Ü—ñ–∞–ª—É', '–ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π —Ä–æ–∑–≤–∏—Ç–æ–∫', '–±—ñ–∑–Ω–µ—Å-–æ—Å–≤—ñ—Ç–∞', '—É–ø—Ä–∞–≤–ª—ñ–Ω—Å—å–∫–∞ –æ—Å–≤—ñ—Ç–∞'],
//     '—Å—Ç–∞—Ä—Ç–∞–ø–∏': ['startup grants', 'business acceleration', 'business incubation', 'incubator', 'innovations', 'incubator funding', '–≥—Ä–∞–Ω—Ç–∏ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞–ø—ñ–≤', '–±—ñ–∑–Ω–µ—Å-–∞–∫—Å–µ–ª–µ—Ä–∞—Ü—ñ—è', '–±—ñ–∑–Ω–µ—Å-—ñ–Ω–∫—É–±–∞—Ü—ñ—è', '—ñ–Ω–∫—É–±–∞—Ç–æ—Ä', '—ñ–Ω–Ω–æ–≤–∞—Ü—ñ—ó', '—Ñ—ñ–Ω–∞–Ω—Å—É–≤–∞–Ω–Ω—è —ñ–Ω–∫—É–±–∞—Ç–æ—Ä—ñ–≤'],
//     '–ø—ñ–¥—Ç—Ä–∏–º–∫–∞ –≤–µ—Ç–µ—Ä–∞–Ω—ñ–≤': ['veteran entrepreneurship', 'veteran education', 'veteran business grants', 'reintegration programs', '–ø—ñ–¥–ø—Ä–∏—î–º–Ω–∏—Ü—Ç–≤–æ –≤–µ—Ç–µ—Ä–∞–Ω—ñ–≤', '–æ—Å–≤—ñ—Ç–∞ –¥–ª—è –≤–µ—Ç–µ—Ä–∞–Ω—ñ–≤', '–±—ñ–∑–Ω–µ—Å-–≥—Ä–∞–Ω—Ç–∏ –¥–ª—è –≤–µ—Ç–µ—Ä–∞–Ω—ñ–≤', '–ø—Ä–æ–≥—Ä–∞–º–∏ —Ä–µ—ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó'],
//     '–Ω–∞–≤—á–∞–Ω–Ω—è –ø—ñ–¥–ø—Ä–∏—î–º–Ω–∏—Ü—Ç–≤—É': ['entrepreneurship training', 'SME support', 'business incubation', 'business resilience programs', '—Ç—Ä–µ–Ω—ñ–Ω–≥–∏ –∑ –ø—ñ–¥–ø—Ä–∏—î–º–Ω–∏—Ü—Ç–≤–∞', '–ø—ñ–¥—Ç—Ä–∏–º–∫–∞ –ú–°–ü', '–±—ñ–∑–Ω–µ—Å-—ñ–Ω–∫—É–±–∞—Ü—ñ—è', '–ø—Ä–æ–≥—Ä–∞–º–∏ –±—ñ–∑–Ω–µ—Å-—Ä–µ–∑–∏–ª—å—î–Ω—Ç–Ω–æ—Å—Ç—ñ'],
//     '–±—ñ–∑–Ω–µ—Å-—à–∫–æ–ª–∏': ['management education', 'business school funding', 'research grants in management', 'doctoral education funding', 'MBA', 'DBA', '–æ—Å–≤—ñ—Ç–∞ –≤ –≥–∞–ª—É–∑—ñ –º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç—É', '—Ñ—ñ–Ω–∞–Ω—Å—É–≤–∞–Ω–Ω—è –±—ñ–∑–Ω–µ—Å-—à–∫—ñ–ª', '–≥—Ä–∞–Ω—Ç–∏ –Ω–∞ –¥–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è —É —Å—Ñ–µ—Ä—ñ –º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç—É', '—Ñ—ñ–Ω–∞–Ω—Å—É–≤–∞–Ω–Ω—è –¥–æ–∫—Ç–æ—Ä—Å—å–∫–∏—Ö –ø—Ä–æ–≥—Ä–∞–º', 'MBA', 'DBA'],
//     '–∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–µ –Ω–∞–≤—á–∞–Ω–Ω—è': ['corporate training', 'workforce upskilling', 'lifelong learning', 'l&d', '–∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–µ –Ω–∞–≤—á–∞–Ω–Ω—è', '–ø—ñ–¥–≤–∏—â–µ–Ω–Ω—è –∫–≤–∞–ª—ñ—Ñ—ñ–∫–∞—Ü—ñ—ó –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤', '–Ω–∞–≤—á–∞–Ω–Ω—è –≤–ø—Ä–æ–¥–æ–≤–∂ –∂–∏—Ç—Ç—è', '–Ω–∞–≤—á–∞–Ω–Ω—è —Ç–∞ —Ä–æ–∑–≤–∏—Ç–æ–∫ (L&D)'],
//     '–ø—Ä–æ–≥—Ä–∞–º–∏ –¥–ª—è –∂—ñ–Ω–æ–∫': ['women entrepreneurship', 'women leadership programs', 'gender equity in business', '–∂—ñ–Ω–æ—á–µ –ø—ñ–¥–ø—Ä–∏—î–º–Ω–∏—Ü—Ç–≤–æ', '–ø—Ä–æ–≥—Ä–∞–º–∏ –∂—ñ–Ω–æ—á–æ–≥–æ –ª—ñ–¥–µ—Ä—Å—Ç–≤–∞', '–≥–µ–Ω–¥–µ—Ä–Ω–∞ —Ä—ñ–≤–Ω—ñ—Å—Ç—å —É –±—ñ–∑–Ω–µ—Å—ñ'],
//     '–ª—ñ–¥–µ—Ä—Å—Ç–≤–æ –π —Ä–µ–∑–∏–ª—å—î—î–Ω—Ç–Ω—ñ—Å—Ç—å': ['leadership development', 'resilience training', 'adaptive leadership programs', 'business leadership', 'business resilience', '—Ä–æ–∑–≤–∏—Ç–æ–∫ –ª—ñ–¥–µ—Ä—Å—Ç–≤–∞', '—Ç—Ä–µ–Ω—ñ–Ω–≥–∏ –∑ —Ä–µ–∑–∏–ª—å—î–Ω—Ç–Ω–æ—Å—Ç—ñ', '–∞–¥–∞–ø—Ç–∏–≤–Ω–µ –ª—ñ–¥–µ—Ä—Å—Ç–≤–æ', '–±—ñ–∑–Ω–µ—Å-–ª—ñ–¥–µ—Ä—Å—Ç–≤–æ', '—Å—Ç—ñ–π–∫—ñ—Å—Ç—å –±—ñ–∑–Ω–µ—Å—É'],
//     '—Ñ—ñ–Ω–∞–Ω—Å–∏ –π —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó': ['financial literacy programs', 'investment readiness', 'impact investment', 'economic empowerment', '–ø—Ä–æ–≥—Ä–∞–º–∏ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–æ—ó –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—ñ', '–≥–æ—Ç–æ–≤–Ω—ñ—Å—Ç—å –¥–æ —ñ–Ω–≤–µ—Å—Ç—É–≤–∞–Ω–Ω—è', '–≤–ø–ª–∏–≤–æ–≤—ñ —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó', '–µ–∫–æ–Ω–æ–º—ñ—á–Ω–µ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π'],
//     'HR': ['human capital development', 'HR management training', 'talent management grants', '—Ä–æ–∑–≤–∏—Ç–æ–∫ –ª—é–¥—Å—å–∫–æ–≥–æ –∫–∞–ø—ñ—Ç–∞–ª—É', '–Ω–∞–≤—á–∞–Ω–Ω—è –∑ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º', '–≥—Ä–∞–Ω—Ç–∏ –Ω–∞ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ç–∞–ª–∞–Ω—Ç–∞–º–∏'],
//     '—ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ–π–Ω—ñ –ø—Ä–æ—î–∫—Ç–∏': ['investment funding', 'business scaling grants', 'international cooperation in finance', '—Ñ—ñ–Ω–∞–Ω—Å—É–≤–∞–Ω–Ω—è —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ–π', '–≥—Ä–∞–Ω—Ç–∏ –Ω–∞ –º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è –±—ñ–∑–Ω–µ—Å—É', '–º—ñ–∂–Ω–∞—Ä–æ–¥–Ω–µ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏—Ü—Ç–≤–æ —É —Ñ—ñ–Ω–∞–Ω—Å–∞—Ö']
// };

async function extractGrantInfo(text, url) {
    // Validate inputs
    if (!text || text.trim().length < 50) {
        console.warn(`Insufficient text content for URL: ${url}`);
        return null;
    }

    // Truncate text if too long
    const truncatedText = text.length > CONFIG.MAX_TEXT_LENGTH 
        ? text.substring(0, CONFIG.MAX_TEXT_LENGTH) + '...'
        : text;

    // –î–µ—Ç–∞–ª—å–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –¥–ª—è –¥–µ–±–∞–≥—É –¥–µ–¥–ª–∞–π–Ω—ñ–≤
    if (CONFIG.DEBUG_LOGGING) {
        console.log(`\nüîç DEBUG: Analyzing text for ${url}`);
        console.log(`üìÑ Original text length: ${text.length} characters`);
        console.log(`‚úÇÔ∏è Truncated text length: ${truncatedText.length} characters`);
        
        // –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ —Ç–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 300 —Å–∏–º–≤–æ–ª—ñ–≤ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
        console.log(`\nüìñ TEXT PREVIEW (first 300 chars):`);
        console.log(`"${truncatedText.substring(0, 300)}..."`);
        
        if (truncatedText.length > 600) {
            console.log(`\nüìñ TEXT PREVIEW (last 300 chars):`);
            console.log(`"...${truncatedText.substring(truncatedText.length - 300)}"`);
        }
        
        // –ü–æ—à—É–∫ –º–æ–∂–ª–∏–≤–∏—Ö –¥–µ–¥–ª–∞–π–Ω—ñ–≤ —É —Ç–µ–∫—Å—Ç—ñ –¥–ª—è –¥–µ–±–∞–≥—É
        const datePatterns = [
            /\d{1,2}[-./]\d{1,2}[-./]\d{4}/g,           // DD-MM-YYYY, DD.MM.YYYY, DD/MM/YYYY
            /\d{4}[-./]\d{1,2}[-./]\d{1,2}/g,           // YYYY-MM-DD, YYYY.MM.DD, YYYY/MM/DD  
            /\d{1,2}\s+(—Å—ñ—á–Ω—è|–ª—é—Ç–æ–≥–æ|–±–µ—Ä–µ–∑–Ω—è|–∫–≤—ñ—Ç–Ω—è|—Ç—Ä–∞–≤–Ω—è|—á–µ—Ä–≤–Ω—è|–ª–∏–ø–Ω—è|—Å–µ—Ä–ø–Ω—è|–≤–µ—Ä–µ—Å–Ω—è|–∂–æ–≤—Ç–Ω—è|–ª–∏—Å—Ç–æ–ø–∞–¥–∞|–≥—Ä—É–¥–Ω—è)\s+\d{4}/gi,
            /\d{1,2}\s+(january|february|march|april|may|june|july|august|september|october|november|december)\s+\d{4}/gi,
            /(–¥–æ|–¥–æ\s+|deadline|—Ç–µ—Ä–º—ñ–Ω|–∫—Ä–∞–π–Ω—ñ–π\s+—Ç–µ—Ä–º—ñ–Ω|–¥–µ–¥–ª–∞–π–Ω).{0,50}\d{1,2}[-./]\d{1,2}[-./]\d{4}/gi
        ];
        
        console.log(`\nüóìÔ∏è SEARCHING FOR DATES IN TEXT:`);
        datePatterns.forEach((pattern, index) => {
            const matches = truncatedText.match(pattern);
            if (matches) {
                console.log(`   Pattern ${index + 1}: ${matches.slice(0, 3).join(', ')}${matches.length > 3 ? ` (and ${matches.length - 3} more)` : ''}`);
            }
        });
    }

    const prompt = `
        –¢–≤–æ—è –∑–∞–¥–∞—á–∞, –≤–∏—Ç—è–≥–Ω—É—Ç–∏ –∑ —Ç–µ–∫—Å—Ç—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≥—Ä–∞–Ω—Ç. \n

        –ú–µ–Ω—ñ –ø–æ—Ç—Ä—ñ–±–Ω—ñ —Ç–∞–∫—ñ –ø–æ–ª—è, —è–∫—ñ —Ç–∏ –∑–∞–ø–æ–≤–Ω–∏—à —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –∑ —Ç–µ–∫—Å—Ç—É: \n
        1. –ù–∞–∑–≤–∞ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ (title) \n
        2. –î–µ–¥–ª–∞–π–Ω —É —Ñ–æ—Ä–º–∞—Ç—ñ DD-MM-YYYY (deadline). –Ø–∫—â–æ –≥—Ä–∞–Ω—Ç –±–µ–∑—Å—Ç—Ä–æ–∫–æ–≤–∏–π, –ø–æ–≤–µ—Ä–Ω–∏ null. \n
        3. –ö–∞—Ç–µ–≥–æ—Ä—ñ—è (category). –ù–∞ –æ—Å–Ω–æ–≤—ñ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –≤–∏–±–µ—Ä–∏ –æ–¥–Ω—É –∑ —Ü–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π: ${categories.join(', ')}. –Ø–∫—â–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è –Ω–µ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å, –ø–æ–≤–µ—Ä–Ω–∏ null, –Ω–µ –≤–∏–≥–∞–¥—É–π –Ω–æ–≤—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π —Ç—ñ–ª—å–∫–∏ —Ç–µ, —â–æ —è –≤–∫–∞–∑–∞–≤. \n

        –ü–æ–≤–µ—Ä–Ω–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å —É —Ñ–æ—Ä–º–∞—Ç—ñ JSON (–Ü –¢–Ü–õ–¨–ö–ò –£ –§–û–†–ú–ê–¢–Ü JSON, –ù–Ü–ß–û–ì–û –ë–Ü–õ–¨–®–ï). –ù–∞–ø—Ä–∏–∫–ª–∞–¥: {"title": "–ù–∞–∑–≤–∞ –≥—Ä–∞–Ω—Ç—É", "deadline": "31-12-2024", "category": "–û—Å–≤—ñ—Ç–∞"} \n


        –¢–µ–∫—Å—Ç –¥–ª—è –æ–ø—Ä–∞—Ü—é–≤–∞–Ω–Ω—è:\n "${truncatedText}"
    `;
// –ö–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π:
// ${JSON.stringify(keywords, null, 2)}

    // –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø—Ä–æ–º–ø—Ç—É –¥–ª—è –¥–µ–±–∞–≥—É
    if (CONFIG.DEBUG_LOGGING) {
        console.log(`\nüí¨ PROMPT SENT TO AI:`);
        console.log(`"${prompt.substring(0, 500)}..."`);
        console.log(`üìè Prompt length: ${prompt.length} characters`);
        console.log(`ü§ñ Using model: ${CONFIG.MODEL}`);
        console.log(`üå°Ô∏è Temperature: ${CONFIG.TEMPERATURE || 'default'}`);
    }

    let attempt = 0;
    while (attempt < CONFIG.RETRY_COUNT) {
        try {
            const response = await axios.post('https://api.openai.com/v1/chat/completions', {
                model: CONFIG.MODEL,
                messages: [{ role: 'user', content: prompt }],
                temperature: CONFIG.TEMPERATURE,
            }, {
                headers: {
                    'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
                    'Content-Type': 'application/json'
                },
                timeout: 30000 // 30 seconds timeout
            });

            let content = response.data.choices[0].message.content;
            
            // –õ–æ–≥—É–≤–∞–Ω–Ω—è —Å–∏—Ä–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ AI
            if (CONFIG.DEBUG_LOGGING) {
                console.log(`\nü§ñ AI RAW RESPONSE:`);
                console.log(`"${content}"`);
            }
            
            // Remove markdown code blocks if present
            content = content.replace(/```json\s*/g, '').replace(/```\s*/g, '').trim();
            
            if (CONFIG.DEBUG_LOGGING) {
                console.log(`\nüßπ AI CLEANED RESPONSE:`);
                console.log(`"${content}"`);
            }
            
            const result = JSON.parse(content);

            // –î–µ—Ç–∞–ª—å–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è –ø–∞—Ä—Å—ñ–Ω–≥—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
            if (CONFIG.DEBUG_LOGGING) {
                console.log(`\nüìä PARSED RESULT:`);
                console.log(`   Title: "${result.title}"`);
                console.log(`   Deadline: "${result.deadline}"`);
                console.log(`   Category: "${result.category}"`);
                
                // Additional deadline debugging
                if (result.deadline) {
                    console.log(`\nüóìÔ∏è DEADLINE ANALYSIS:`);
                    console.log(`   Raw deadline from AI: "${result.deadline}"`);
                    console.log(`   Type: ${typeof result.deadline}`);
                    console.log(`   Length: ${result.deadline.length}`);
                    
                    // Test the date conversion that will happen in the database
                    const parts = result.deadline.split('-');
                    if (parts.length === 3) {
                        const day = parseInt(parts[0], 10);
                        const month = parseInt(parts[1], 10);
                        const year = parseInt(parts[2], 10);
                        console.log(`   Parsed: Day=${day}, Month=${month}, Year=${year}`);
                        
                        // Show what the database conversion will produce
                        const paddedMonth = month.toString().padStart(2, '0');
                        const paddedDay = day.toString().padStart(2, '0');
                        const dbFormat = `${year}-${paddedMonth}-${paddedDay}`;
                        console.log(`   Will be stored in DB as: "${dbFormat}"`);
                    }
                }
            }

            // Validate result structure
            if (!result.title || typeof result.title !== 'string') {
                throw new Error('Invalid response: missing or invalid title');
            }

            if (result.category === null) {
                console.log(`Grant "${result.title}" from ${url} skipped - no matching category`);
                // Save to rejected grants table to avoid reprocessing
                await saveRejectedGrant(url, result.title, 'no_matching_category', text.substring(0, 1000));
                return null;
            }

            if (CONFIG.DEBUG_LOGGING) {
                console.log(`‚úÖ Successfully extracted grant info for: "${result.title}"`);
                console.log(`   üìÖ Found deadline: ${result.deadline || 'null'}`);
                console.log(`   üè∑Ô∏è Assigned category: ${result.category}\n`);
            } else {
                console.log(`‚úÖ Extracted: "${result.title}" (deadline: ${result.deadline || 'null'})`);
            }
            
            return { ...result, url };

        } catch (error) {
            attempt++;
            const isLastAttempt = attempt >= CONFIG.RETRY_COUNT;
            
            if (error.response?.status === 429) {
                // Rate limit error - wait longer
                const waitTime = CONFIG.RETRY_DELAY * attempt * 2;
                console.warn(`Rate limited for ${url}, retrying in ${waitTime}ms (attempt ${attempt}/${CONFIG.RETRY_COUNT})`);
                if (!isLastAttempt) {
                    await new Promise(resolve => setTimeout(resolve, waitTime));
                    continue;
                }
            }
            
            if (isLastAttempt) {
                const errorMessage = error.response?.data?.error?.message || error.message;
                console.error(`Failed to extract grant info from ${url} after ${CONFIG.RETRY_COUNT} attempts:`, errorMessage);
                
                // Save to rejected grants table to avoid reprocessing
                await saveRejectedGrant(url, null, `extraction_failed: ${errorMessage}`, text.substring(0, 1000));
                return null;
            }
            
            // Wait before retry
            await new Promise(resolve => setTimeout(resolve, CONFIG.RETRY_DELAY * attempt));
        }
    }
    
    return null;
}

module.exports = { extractGrantInfo };
