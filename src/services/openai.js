const axios = require('axios');
const path = require('path');
const { saveRejectedGrant } = require('../lib/db');
require('dotenv').config({ path: path.join(__dirname, '../../.env') });

const CONFIG = {
  MAX_TEXT_LENGTH: 10000,
  RETRY_COUNT: 3,
  RETRY_DELAY: 1000,
  TEMPERATURE: 1,
  MODEL: 'gpt-5-mini'
};

const categories = [
  '–û—Å–≤—ñ—Ç–∞',
  '–°—Ç–∞—Ä—Ç–∞–ø–∏',
  '–ü—ñ–¥—Ç—Ä–∏–º–∫–∞ –≤–µ—Ç–µ—Ä–∞–Ω—ñ–≤',
  '–ù–∞–≤—á–∞–Ω–Ω—è –ø—ñ–¥–ø—Ä–∏—î–º–Ω–∏—Ü—Ç–≤—É',
  '–í–∏—â–∞ –æ—Å–≤—ñ—Ç–∞ —É –º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç—ñ',
  '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–µ –Ω–∞–≤—á–∞–Ω–Ω—è',
  '–ù–∞–≤—á–∞–Ω–Ω—è –∂—ñ–Ω–æ–∫',
  '–õ—ñ–¥–µ—Ä—Å—Ç–≤–æ —Ç–∞ —Ä–µ–∑–∏–ª—å—î–Ω—Ç–Ω—ñ—Å—Ç—å',
  '–§—ñ–Ω–∞–Ω—Å–∏ —Ç–∞ —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó',
  '–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º',
  '–Ü–Ω–≤–µ—Å—Ç–∏—Ü—ñ–π–Ω—ñ –ø—Ä–æ—î–∫—Ç–∏'
];

const keywords = {
  '–û—Å–≤—ñ—Ç–∞': [
    'higher education funding', 'education grants', 'capacity building', 'professional development', 'business education', 'executive education',
    '—Ñ—ñ–Ω–∞–Ω—Å—É–≤–∞–Ω–Ω—è –≤–∏—â–æ—ó –æ—Å–≤—ñ—Ç–∏', '–æ—Å–≤—ñ—Ç–Ω—ñ –≥—Ä–∞–Ω—Ç–∏', '–Ω–∞—Ä–æ—â—É–≤–∞–Ω–Ω—è –ø–æ—Ç–µ–Ω—Ü—ñ–∞–ª—É', '–ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π —Ä–æ–∑–≤–∏—Ç–æ–∫', '–±—ñ–∑–Ω–µ—Å-–æ—Å–≤—ñ—Ç–∞', '—É–ø—Ä–∞–≤–ª—ñ–Ω—Å—å–∫–∞ –æ—Å–≤—ñ—Ç–∞'
  ],
  '–°—Ç–∞—Ä—Ç–∞–ø–∏': [
    'startup grants', 'business acceleration', 'business incubation', 'incubator', 'innovations', 'incubator funding',
    '–≥—Ä–∞–Ω—Ç–∏ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞–ø—ñ–≤', '–±—ñ–∑–Ω–µ—Å-–∞–∫—Å–µ–ª–µ—Ä–∞—Ü—ñ—è', '–±—ñ–∑–Ω–µ—Å-—ñ–Ω–∫—É–±–∞—Ü—ñ—è', '—ñ–Ω–∫—É–±–∞—Ç–æ—Ä', '—ñ–Ω–Ω–æ–≤–∞—Ü—ñ—ó', '—Ñ—ñ–Ω–∞–Ω—Å—É–≤–∞–Ω–Ω—è —ñ–Ω–∫—É–±–∞—Ç–æ—Ä—ñ–≤'
  ],
  '–ü—ñ–¥—Ç—Ä–∏–º–∫–∞ –≤–µ—Ç–µ—Ä–∞–Ω—ñ–≤': [
    'veteran entrepreneurship', 'veteran education', 'veteran business grants', 'reintegration programs',
    '–ø—ñ–¥–ø—Ä–∏—î–º–Ω–∏—Ü—Ç–≤–æ –≤–µ—Ç–µ—Ä–∞–Ω—ñ–≤', '–æ—Å–≤—ñ—Ç–∞ –¥–ª—è –≤–µ—Ç–µ—Ä–∞–Ω—ñ–≤', '–±—ñ–∑–Ω–µ—Å-–≥—Ä–∞–Ω—Ç–∏ –¥–ª—è –≤–µ—Ç–µ—Ä–∞–Ω—ñ–≤', '–ø—Ä–æ–≥—Ä–∞–º–∏ —Ä–µ—ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó'
  ],
  '–ù–∞–≤—á–∞–Ω–Ω—è –ø—ñ–¥–ø—Ä–∏—î–º–Ω–∏—Ü—Ç–≤—É': [
    'entrepreneurship training', 'SME support', 'business incubation', 'business resilience programs',
    '—Ç—Ä–µ–Ω—ñ–Ω–≥–∏ –∑ –ø—ñ–¥–ø—Ä–∏—î–º–Ω–∏—Ü—Ç–≤–∞', '–ø—ñ–¥—Ç—Ä–∏–º–∫–∞ –ú–°–ü', '–±—ñ–∑–Ω–µ—Å-—ñ–Ω–∫—É–±–∞—Ü—ñ—è', '–ø—Ä–æ–≥—Ä–∞–º–∏ –±—ñ–∑–Ω–µ—Å-—Ä–µ–∑–∏–ª—å—î–Ω—Ç–Ω–æ—Å—Ç—ñ'
  ],
  '–í–∏—â–∞ –æ—Å–≤—ñ—Ç–∞ —É –º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç—ñ': [
    'management education', 'business school funding', 'research grants in management', 'doctoral education funding', 'MBA', 'DBA',
    '–æ—Å–≤—ñ—Ç–∞ –≤ –≥–∞–ª—É–∑—ñ –º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç—É', '—Ñ—ñ–Ω–∞–Ω—Å—É–≤–∞–Ω–Ω—è –±—ñ–∑–Ω–µ—Å-—à–∫—ñ–ª', '–≥—Ä–∞–Ω—Ç–∏ –Ω–∞ –¥–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è —É —Å—Ñ–µ—Ä—ñ –º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç—É', '—Ñ—ñ–Ω–∞–Ω—Å—É–≤–∞–Ω–Ω—è –¥–æ–∫—Ç–æ—Ä—Å—å–∫–∏—Ö –ø—Ä–æ–≥—Ä–∞–º', 'MBA', 'DBA'
  ],
  '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–µ –Ω–∞–≤—á–∞–Ω–Ω—è': [
    'corporate training', 'workforce upskilling', 'lifelong learning', 'l&d',
    '–∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–µ –Ω–∞–≤—á–∞–Ω–Ω—è', '–ø—ñ–¥–≤–∏—â–µ–Ω–Ω—è –∫–≤–∞–ª—ñ—Ñ—ñ–∫–∞—Ü—ñ—ó –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤', '–Ω–∞–≤—á–∞–Ω–Ω—è –≤–ø—Ä–æ–¥–æ–≤–∂ –∂–∏—Ç—Ç—è', '–Ω–∞–≤—á–∞–Ω–Ω—è —Ç–∞ —Ä–æ–∑–≤–∏—Ç–æ–∫ (L&D)'
  ],
  '–ù–∞–≤—á–∞–Ω–Ω—è –∂—ñ–Ω–æ–∫': [
    'women entrepreneurship', 'women leadership programs', 'gender equity in business',
    '–∂—ñ–Ω–æ—á–µ –ø—ñ–¥–ø—Ä–∏—î–º–Ω–∏—Ü—Ç–≤–æ', '–ø—Ä–æ–≥—Ä–∞–º–∏ –∂—ñ–Ω–æ—á–æ–≥–æ –ª—ñ–¥–µ—Ä—Å—Ç–≤–∞', '–≥–µ–Ω–¥–µ—Ä–Ω–∞ —Ä—ñ–≤–Ω—ñ—Å—Ç—å —É –±—ñ–∑–Ω–µ—Å—ñ'
  ],
  '–õ—ñ–¥–µ—Ä—Å—Ç–≤–æ —Ç–∞ —Ä–µ–∑–∏–ª—å—î–Ω—Ç–Ω—ñ—Å—Ç—å': [
    'leadership development', 'resilience training', 'adaptive leadership programs', 'business leadership', 'business resilience',
    '—Ä–æ–∑–≤–∏—Ç–æ–∫ –ª—ñ–¥–µ—Ä—Å—Ç–≤–∞', '—Ç—Ä–µ–Ω—ñ–Ω–≥–∏ –∑ —Ä–µ–∑–∏–ª—å—î–Ω—Ç–Ω–æ—Å—Ç—ñ', '–∞–¥–∞–ø—Ç–∏–≤–Ω–µ –ª—ñ–¥–µ—Ä—Å—Ç–≤–æ', '–±—ñ–∑–Ω–µ—Å-–ª—ñ–¥–µ—Ä—Å—Ç–≤–æ', '—Å—Ç—ñ–π–∫—ñ—Å—Ç—å –±—ñ–∑–Ω–µ—Å—É'
  ],
  '–§—ñ–Ω–∞–Ω—Å–∏ —Ç–∞ —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó': [
    'financial literacy programs', 'investment readiness', 'impact investment', 'economic empowerment',
    '–ø—Ä–æ–≥—Ä–∞–º–∏ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–æ—ó –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—ñ', '–≥–æ—Ç–æ–≤–Ω—ñ—Å—Ç—å –¥–æ —ñ–Ω–≤–µ—Å—Ç—É–≤–∞–Ω–Ω—è', '–≤–ø–ª–∏–≤–æ–≤—ñ —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó', '–µ–∫–æ–Ω–æ–º—ñ—á–Ω–µ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π'
  ],
  '–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º': [
    'human capital development', 'HR management training', 'talent management grants',
    '—Ä–æ–∑–≤–∏—Ç–æ–∫ –ª—é–¥—Å—å–∫–æ–≥–æ –∫–∞–ø—ñ—Ç–∞–ª—É', '–Ω–∞–≤—á–∞–Ω–Ω—è –∑ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º', '–≥—Ä–∞–Ω—Ç–∏ –Ω–∞ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ç–∞–ª–∞–Ω—Ç–∞–º–∏'
  ],
  '–Ü–Ω–≤–µ—Å—Ç–∏—Ü—ñ–π–Ω—ñ –ø—Ä–æ—î–∫—Ç–∏': [
    'investment funding', 'business scaling grants', 'international cooperation in finance',
    '—Ñ—ñ–Ω–∞–Ω—Å—É–≤–∞–Ω–Ω—è —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ–π', '–≥—Ä–∞–Ω—Ç–∏ –Ω–∞ –º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è –±—ñ–∑–Ω–µ—Å—É', '–º—ñ–∂–Ω–∞—Ä–æ–¥–Ω–µ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏—Ü—Ç–≤–æ —É —Ñ—ñ–Ω–∞–Ω—Å–∞—Ö'
  ]
};

async function extractGrantInfo(text, url) {
  console.log(`ü§ñ [RECOMMENDATION ENGINE] Starting AI analysis for URL: ${url}`);
  
  // Validate inputs
  if (!text || text.trim().length < 50) {
    console.warn(`‚ùå [RECOMMENDATION ENGINE] Insufficient text content for URL: ${url} (length: ${text?.length || 0})`);
    return null;
  }

  console.log(`üìÑ [RECOMMENDATION ENGINE] Processing text content (length: ${text.length} characters)`);
  
  // Truncate text if too long
  const truncatedText = text.length > CONFIG.MAX_TEXT_LENGTH
    ? text.substring(0, CONFIG.MAX_TEXT_LENGTH) + '...'
    : text;
    
  if (text.length > CONFIG.MAX_TEXT_LENGTH) {
    console.log(`‚úÇÔ∏è [RECOMMENDATION ENGINE] Text truncated from ${text.length} to ${CONFIG.MAX_TEXT_LENGTH} characters`);
  }


  console.log(`üéØ [RECOMMENDATION ENGINE] Preparing AI prompt with materials:`);
  console.log(`   ‚Ä¢ Available categories: ${categories.length} (${categories.join(', ')})`);
  console.log(`   ‚Ä¢ Keyword sets: ${Object.keys(keywords).length} category groups`);
  console.log(`   ‚Ä¢ Filtering criteria: grants <20k$, SME/small business, student scholarships`);
  console.log(`   ‚Ä¢ AI Model: ${CONFIG.MODEL}, Temperature: ${CONFIG.TEMPERATURE}`);

  const prompt = `
–í–∏—Ç—è–≥–Ω–∏ –∑ —Ç–µ–∫—Å—Ç—É:
- title: –Ω–∞–∑–≤–∞
- deadline: DD-MM-YYYY –∞–±–æ null
- category: –æ–¥–Ω–∞ –∑ ${categories.join(', ')}

–í—Å—Ç–∞–Ω–æ–≤–∏ null –∫—Ä—ñ–º title, —è–∫—â–æ:
- –ì—Ä–∞–Ω—Ç <20k$
- –î–ª—è –ú–°–ü/–º–∞–ª–æ–≥–æ –±—ñ–∑–Ω–µ—Å—É
- –°—Ç–∏–ø–µ–Ω–¥—ñ—ó –¥–ª—è —É—á–Ω—ñ–≤

–ü–æ—Ç—Ä—ñ–±–Ω—ñ –≥—Ä–∞–Ω—Ç–∏, —è–∫—ñ —Ü—ñ–∫–∞–≤–ª—è—Ç—å –≤–µ–ª–∏–∫—ñ –∫–æ–º–ø–∞–Ω—ñ—ó.

JSON: {"title": "–Ω–∞–∑–≤–∞", "deadline": "31-12-2024", "category": "–∫–∞—Ç–µ–≥–æ—Ä—ñ—è"}

–¢–µ–∫—Å—Ç: "${truncatedText}"
`;

  console.log(`üì§ [RECOMMENDATION ENGINE] Sending analysis request to OpenAI...`);

// –ö–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è AI –¥–ª—è –∫—Ä–∞—â–æ–≥–æ —Ä–æ–∑—É–º—ñ–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É):
// –¶—ñ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –¥–æ–ø–æ–º–∞–≥–∞—é—Ç—å AI –º–æ–¥–µ–ª—ñ –∫—Ä–∞—â–µ —Ä–æ–∑—É–º—ñ—Ç–∏ —è–∫—ñ –≥—Ä–∞–Ω—Ç–∏ –≤—ñ–¥–Ω–æ—Å–∏—Ç–∏ –¥–æ –∫–æ–∂–Ω–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
// ${JSON.stringify(keywords, null, 2)}

  let attempt = 0;
  while (attempt < CONFIG.RETRY_COUNT) {
    try {
      console.log(`üîÑ [RECOMMENDATION ENGINE] Attempt ${attempt + 1}/${CONFIG.RETRY_COUNT} for URL: ${url}`);
      
      const response = await axios.post('https://api.openai.com/v1/chat/completions', {
        model: CONFIG.MODEL,
        messages: [{ role: 'user', content: prompt }],
        temperature: CONFIG.TEMPERATURE,
      }, {
        headers: {
          'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`
          // 'Content-Type': 'application/json'
        },
        timeout: 30000 // 30 seconds timeout
      });

      console.log(`üì• [RECOMMENDATION ENGINE] Received response from OpenAI for URL: ${url}`);
      
      let content = response.data.choices[0].message.content;
      console.log(`üîß [RECOMMENDATION ENGINE] Raw AI response: ${content.substring(0, 200)}...`);

      // Remove markdown code blocks if present
      content = content.replace(/```json\s*/g, '').replace(/```\s*/g, '').trim();

      const result = JSON.parse(content);
      console.log(`‚úÖ [RECOMMENDATION ENGINE] Parsed recommendation result:`, {
        title: result.title,
        deadline: result.deadline,
        category: result.category,
        url: url
      });

      // Validate result structure
      if (!result.title || typeof result.title !== 'string') {
        throw new Error('Invalid response: missing or invalid title');
      }

      if (result.category === null) {
        console.log(`üö´ [RECOMMENDATION ENGINE] Grant "${result.title}" from ${url} filtered out - no matching category (likely <20k$, SME, or student scholarship)`);
        // Save to rejected grants table to avoid reprocessing
        await saveRejectedGrant(url, result.title, 'no_matching_category', text.substring(0, 1000));
        return null;
      }

      console.log(`üéâ [RECOMMENDATION ENGINE] Successfully categorized grant: "${result.title}" ‚Üí ${result.category}`);
      return { ...result, url };

    } catch (error) {
      attempt++;
      const isLastAttempt = attempt >= CONFIG.RETRY_COUNT;

      console.log(`‚ùå [RECOMMENDATION ENGINE] Error on attempt ${attempt}/${CONFIG.RETRY_COUNT} for ${url}: ${error.message}`);

      if (error.response?.status === 429) {
        // Rate limit error - wait longer
        const waitTime = CONFIG.RETRY_DELAY * attempt * 2;
        console.warn(`‚è≥ [RECOMMENDATION ENGINE] Rate limited for ${url}, retrying in ${waitTime}ms (attempt ${attempt}/${CONFIG.RETRY_COUNT})`);
        if (!isLastAttempt) {
          await new Promise(resolve => setTimeout(resolve, waitTime));
          continue;
        }
      }

      if (isLastAttempt) {
        const errorMessage = error.response?.data?.error?.message || error.message;
        console.error(`üí• [RECOMMENDATION ENGINE] Failed to extract grant info from ${url} after ${CONFIG.RETRY_COUNT} attempts:`, errorMessage);

        // Save to rejected grants table to avoid reprocessing
        await saveRejectedGrant(url, null, `extraction_failed: ${errorMessage}`, text.substring(0, 1000));
        return null;
      }

      // Wait before retry
      console.log(`‚è≥ [RECOMMENDATION ENGINE] Waiting ${CONFIG.RETRY_DELAY * attempt}ms before retry...`);
      await new Promise(resolve => setTimeout(resolve, CONFIG.RETRY_DELAY * attempt));
    }
  }

  console.log(`üí• [RECOMMENDATION ENGINE] All attempts exhausted for URL: ${url}`);
  return null;
}

/**
 * Get recommendation engine configuration for documentation and debugging
 * @returns {Object} Configuration details
 */
function getRecommendationConfig() {
  return {
    model: CONFIG.MODEL,
    temperature: CONFIG.TEMPERATURE,
    maxTextLength: CONFIG.MAX_TEXT_LENGTH,
    retryCount: CONFIG.RETRY_COUNT,
    categories: categories,
    keywordGroups: Object.keys(keywords).length,
    keywords: keywords,
    filteringCriteria: [
      '–ì—Ä–∞–Ω—Ç–∏ –º–µ–Ω—à–µ $20,000',
      '–î–ª—è –ú–°–ü/–º–∞–ª–æ–≥–æ –±—ñ–∑–Ω–µ—Å—É', 
      '–°—Ç–∏–ø–µ–Ω–¥—ñ—ó –¥–ª—è —É—á–Ω—ñ–≤',
      '–ü—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω—ñ –∞–±–æ —Å–∫–æ—Ä–æ –∑–∞–∫—ñ–Ω—á—É—é—Ç—å—Å—è (<10 –¥–Ω—ñ–≤)'
    ]
  };
}

/**
 * Log detailed recommendation engine status
 */
function logRecommendationEngineStatus() {
  const config = getRecommendationConfig();
  console.log('ü§ñ [RECOMMENDATION ENGINE] Configuration:');
  console.log(`   ‚Ä¢ AI Model: ${config.model}`);
  console.log(`   ‚Ä¢ Temperature: ${config.temperature}`);
  console.log(`   ‚Ä¢ Max text length: ${config.maxTextLength} characters`);
  console.log(`   ‚Ä¢ Available categories: ${config.categories.length}`);
  console.log(`   ‚Ä¢ Keyword groups: ${config.keywordGroups}`);
  console.log(`   ‚Ä¢ Filtering criteria: ${config.filteringCriteria.length} rules`);
}

module.exports = { 
  extractGrantInfo, 
  getRecommendationConfig, 
  logRecommendationEngineStatus 
};
